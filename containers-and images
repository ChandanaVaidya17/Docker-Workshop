
## 1. Pulling & Running Images

To pull an official image from Docker Hub, use:
```powershell
# Pull MySQL image from Docker Hub
docker pull mysql
```

To run a container from the image:
```powershell
# Run MySQL container with environment variables
docker run --name my-mysql -e MYSQL_ROOT_PASSWORD=root -d mysql
```

To verify the running container:
```powershell
docker ps
```

## 2. Container Lifecycle

### Start a Stopped Container
```powershell
docker start my-mysql
```

### Stop a Running Container
```powershell
docker stop my-mysql
```

### Remove a Container
```powershell
docker rm my-mysql
```

### View Container Logs
```powershell
docker logs my-mysql
```

## 3. Inspecting Containers

### Enter a Running Container
- **PowerShell:**
```powershell
docker exec -it my-mysql powershell
```

- **CMD:**
```cmd
docker exec -it my-mysql cmd
```

### Inspect Container Details
```powershell
docker inspect my-mysql
```

## 4. Writing a Dockerfile (Building Custom Images)
Create a `Dockerfile`:
```dockerfile
# Use Ubuntu as the base image
FROM ubuntu:latest

# Install dependencies
RUN apt-get update && apt-get install -y curl vim

# Set the working directory
WORKDIR /app

# Copy files into the container
COPY . /app

# Default command
CMD ["bash"]
```

### Build the Custom Image
```powershell
docker build -t my-custom-ubuntu .
```

### Run a Container from the Custom Image
```powershell
docker run -it --name custom-container my-custom-ubuntu
```

## 5. Tagging & Pushing Images to Docker Hub

### Log in to Docker Hub
```powershell
docker login
```

### Tag the Image
```powershell
docker tag my-custom-ubuntu mydockerhubusername/my-custom-ubuntu:v1
```

### Push the Image to Docker Hub
```powershell
docker push mydockerhubusername/my-custom-ubuntu:v1
```

Now, the image is available on Docker Hub for others to pull.

```powershell
docker pull mydockerhubusername/my-custom-ubuntu:v1
```

---
